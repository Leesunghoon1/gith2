package com.myweb.www.security;

import java.io.IOException;

import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.WebAttributes;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.springframework.stereotype.Component;

import com.myweb.www.service.MemberService;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@Component
//이 어노테이션은 스프링 컨테이너에 이 클래스가 컴포넌트로 등록되어 관리되어야 함을 나타냅니다.
@Slf4j
public class LoginSuccessHandler implements AuthenticationSuccessHandler {
	//이 클래스는 AuthenticationSuccessHandler 인터페이스를 구현하는 클래스로, 로그인 성공 시 처리를 담당합니다.

	@Getter
	@Setter
	private String authEmail;
	@Getter
	@Setter
	private String authUrl;
	
	
	private RedirectStrategy rdstg = new DefaultRedirectStrategy();
	// RedirectStrategy 인터페이스를 구현하는 DefaultRedirectStrategy 객체를 생성합니다. 
	// 이 객체는 리다이렉션(페이지 이동)을 처리하는 역할을 합니다.실제 로그인 정보, 경로 등을 저장
	private RequestCache reqCache = new HttpSessionRequestCache();
	//RequestCache 인터페이스를 구현하는 HttpSessionRequestCache 객체를 생성합니다. 
	//이 객체는 요청과 관련된 정보를 저장하고 관리하는 데 사용됩니다
	
	@Inject	
	private MemberService msv;
	
	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		//메서드를 사용하여, 스프링 시큐리티에서 로그인 성공 이후에 원하는 동작을 수행하도록 설정합니다. 
		//이 메서드는 로그인 성공 후 어떤 동작을 수행할지 정의하는 중요한 부분입니다.
		
		setAuthEmail(authentication.getName());
		//이 코드는 로그인에 성공한 사용자의 이름(일반적으로 이메일)을 authentication.getName()을 사용하여 가져와서 authEmail 변수에 저장합니다. 
		//이렇게 함으로써 로그인에 성공한 사용자의 정보를 추적할 수 있습니다.
		
		
		setAuthUrl("/board/list");
		// 로그인에 성공한 사용자를 리디렉션할 URL을 authUrl 변수에 저장합니다. 
		//이 코드에서는 사용자가 로그인 성공한 후에 게시판 목록 페이지로 리디렉션하려는 것으로 보입니다.
		
		
		boolean isOk = msv.updateLastLogin(getAuthEmail());
		//MemberService 객체를 사용하여 사용자의 마지막 로그인 시간을 업데이트하려고 시도합니다. 
		//isOk 변수는 업데이트 작업이 성공적으로 수행되었는지 여부를 나타냅니다.



		
		// 내부에서 로그인 세션 저장됨.
		
		HttpSession ses = request.getSession();
		//: 현재의 HttpServletRequest에서 세션 객체를 가져옵니다. 세션은 사용자의 상태를 유지하고 정보를 저장하는 데 사용됩니다.
		
		log.info("loginSuccess >>> ses >>> " + ses.toString());
		
		// 시큐리티에서 로그인 값이 없다면 null로 저장될 수 있음.
		if(!isOk || ses == null) {
			//isOk 변수가 false이거나 세션이 존재하지 않는 경우, 처리를 중지하고 메서드를 종료합니다. 그렇지 않으면 다음 동작을 수행합니다.
			return;
		} else {
			// 시큐리티에서 로그인을 시도하면 시도한 로그인에 대한 기록이 남게됨.
			// 이전 시도한 시큐리티의 로그인 인증 실패 기록 삭제
			ses.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
		}
		SavedRequest saveReq = reqCache.getRequest(request, response);
		rdstg.sendRedirect(request, response, (saveReq != null ? saveReq.getRedirectUrl() : getAuthUrl()));
		
	}
	
}
