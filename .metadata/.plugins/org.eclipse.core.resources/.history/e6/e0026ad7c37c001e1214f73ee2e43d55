/*
 * package com.myweb.www.security;
 * 
 * import javax.inject.Inject;
 * 
 * import org.springframework.security.core.userdetails.UserDetails; import
 * org.springframework.security.core.userdetails.UserDetailsService; import
 * org.springframework.security.core.userdetails.UsernameNotFoundException;
 * 
 * import com.myweb.www.repository.MemberDAO;
 * 
 * public class CustomAuthMemberService implements UserDetailsService { //이 클래스는
 * UserDetailsService 인터페이스를 구현하는 클래스입니다. //스프링 시큐리티에서 사용자 정보를 로드하고 사용자를 인증하는 데
 * 필요한 메서드를 제공합니다.
 * 
 * @Inject private MemberDAO mdao;
 * 
 * @Override public UserDetails loadUserByUsername(String username) throws
 * UsernameNotFoundException { // username DB에 설정 되어있는 email인지 체크해서 // 인증하여 해당
 * 객체를 AuthMember롤 리턴 // 이 메서드는 UserDetailsService 인터페이스의 일부로 사용자를 검색하고 로드하는 역할을
 * 합니다. // username은 사용자가 입력한 사용자 이름 (일반적으로 이메일)입니다. MemberVO mvo =
 * mdao.selectEmail(username); // mdao를 사용하여 데이터베이스에서 username (이메일)에 해당하는 사용자
 * 정보를 조회합니다.
 * 
 * if(mvo == null) { throw new UsernameNotFoundException(username); //만약
 * 데이터베이스에서 해당 사용자 정보를 찾을 수 없다면, UsernameNotFoundException 예외를 발생시킵니다. //이것은
 * 사용자를 찾을 수 없는 경우에 스프링 시큐리티에 의해 처리됩니다. }
 * mvo.setAuthList(mdao.selectAuths(username)); //사용자의 권한 정보를 데이터베이스에서 가져와
 * MemberVO 객체에 설정합니다. //사용자의 권한은 일반적으로 역할 또는 권한을 나타내는 정보입니다. return new
 * AuthMember(mvo);
 * 
 * 
 * 
 * //이 클래스는 사용자 이름(이메일)을 입력받아 데이터베이스에서 사용자 정보를 조회하고, //그 정보를 스프링 시큐리티가 이해할 수 있는
 * 형식으로 변환하여 인증에 사용됩니다. }
 * 
 * }
 */